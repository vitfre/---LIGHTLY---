;#include <tiny25.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;
;#include <delay.h>
;
;
;#define                                sel PINB.0
;#define                                pls PINB.3
;#define                                mns PINB.4
;
;#define out_put                  PORTB.0  //17
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0010 {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 0011 ADMUX=(adc_input & 0x0f) | ADC_VREF_TYPE;
;	adc_input -> Y+0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0012 // Delay needed for the stabilization of the ADC input voltage
; 0000 0013 delay_us(10);
;PCODE: $00000011 VOL: 0
; 0000 0014 // Start the AD conversion
; 0000 0015 ADCSRA|=0x40;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0016 // Wait for the AD conversion to complete
; 0000 0017 while ((ADCSRA & 0x10)==0);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0018 ADCSRA|=0x10;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0019 return ADCW;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 001A }
;PCODE: $0000001F VOL: 0
;
;
;// Declare your global variables here
;
;
;unsigned int PWM0=0,PWM=0,fl=0,fl1=0,temp=0;
;eeprom unsigned char PWM_eeprom=100;
;
;
;
;
;//**********************************************************************
;void beep (unsigned int squeak)  //Робимо пік
; 0000 0028 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0029 unsigned int i=0,t=128;
; 0000 002A 
; 0000 002B out_put = 0;
;PCODE: $00000022 VOL: 0
;	squeak -> Y+4
;	i -> R16,R17
;	t -> R18,R19
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002C delay_us(62);
;PCODE: $00000029 VOL: 0
; 0000 002D out_put = 1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002E delay_us(62);
;PCODE: $0000002C VOL: 0
; 0000 002F 
; 0000 0030 
; 0000 0031 for (i=0;i<8;i++)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0032     {
; 0000 0033         out_put = 0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0034         delay_us(31);
;PCODE: $00000038 VOL: 0
; 0000 0035         if (squeak>>8&t)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0036         {
; 0000 0037             out_put = 1;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0038             delay_us(62);
;PCODE: $00000040 VOL: 0
; 0000 0039         }else
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 003A         {
; 0000 003B             delay_us(62);
;PCODE: $00000043 VOL: 0
; 0000 003C             out_put = 1;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 003D          };
;PCODE: $00000046 VOL: 0
; 0000 003E         delay_us(31);
;PCODE: $00000047 VOL: 0
; 0000 003F         t=t>>1;
;PCODE: $00000048 VOL: 0
; 0000 0040     };
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0041 out_put = 0;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0042 delay_us(93);
;PCODE: $00000050 VOL: 0
; 0000 0043 out_put = 1;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0044 delay_us(31);
;PCODE: $00000053 VOL: 0
; 0000 0045 
; 0000 0046 out_put = 0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0047 delay_us(62);
;PCODE: $00000056 VOL: 0
; 0000 0048 out_put = 1;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0049 delay_us(62);
;PCODE: $00000059 VOL: 0
; 0000 004A 
; 0000 004B t=128;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004C for (i=0;i<8;i++)
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 004D     {
; 0000 004E         out_put = 0;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 004F         delay_us(31);
;PCODE: $00000067 VOL: 0
; 0000 0050         if (squeak&t)
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0051         {
; 0000 0052             out_put = 1;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0053             delay_us(62);
;PCODE: $0000006F VOL: 0
; 0000 0054         }else
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0055         {
; 0000 0056             delay_us(62);
;PCODE: $00000072 VOL: 0
; 0000 0057             out_put = 1;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0058          };
;PCODE: $00000075 VOL: 0
; 0000 0059         delay_us(31);
;PCODE: $00000076 VOL: 0
; 0000 005A         t=t>>1;
;PCODE: $00000077 VOL: 0
; 0000 005B     };
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 005C out_put = 0;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 005D delay_us(31);
;PCODE: $0000007F VOL: 0
; 0000 005E out_put = 1;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 005F delay_us(93);
;PCODE: $00000082 VOL: 0
; 0000 0060 
; 0000 0061 
; 0000 0062 };
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;
;
;
;
;void main(void)
; 0000 0068 {
;PCODE: $00000087 VOL: 0
; 0000 0069 // Declare your local variables here
; 0000 006A unsigned int i=0;
; 0000 006B // Crystal Oscillator division factor: 1
; 0000 006C #pragma optsize-
; 0000 006D CLKPR=0x80;
;	i -> R16,R17
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006E CLKPR=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 006F #ifdef _OPTIMIZE_SIZE_
; 0000 0070 #pragma optsize+
; 0000 0071 #endif
; 0000 0072 
; 0000 0073 // Input/Output Ports initialization
; 0000 0074 // Port B initialization
; 0000 0075 // Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 0076 // State5=T State4=P State3=P State2=P State1=0 State0=1
; 0000 0077 PORTB=0x1D;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0078 DDRB=0x03;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0079 
; 0000 007A // Timer/Counter 0 initialization
; 0000 007B // Clock source: System Clock
; 0000 007C // Clock value: 125,000 kHz
; 0000 007D // Mode: Fast PWM top=0xFF
; 0000 007E // OC0A output: Disconnected
; 0000 007F // OC0B output: Non-Inverted PWM
; 0000 0080 TCCR0A=0x23;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0081 TCCR0B=0x03;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0082 TCNT0=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0083 OCR0A=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0084 OCR0B=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0085 
; 0000 0086 // Timer/Counter 1 initialization
; 0000 0087 // Clock source: System Clock
; 0000 0088 // Clock value: Timer1 Stopped
; 0000 0089 // Mode: Normal top=0xFF
; 0000 008A // OC1A output: Disconnected
; 0000 008B // OC1B output: Disconnected
; 0000 008C // Timer1 Overflow Interrupt: Off
; 0000 008D // Compare A Match Interrupt: Off
; 0000 008E // Compare B Match Interrupt: Off
; 0000 008F PLLCSR=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0090 
; 0000 0091 TCCR1=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0092 GTCCR=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0093 TCNT1=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0094 OCR1A=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0095 OCR1B=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0096 OCR1C=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0097 
; 0000 0098 // External Interrupt(s) initialization
; 0000 0099 // INT0: Off
; 0000 009A // Interrupt on any change on pins PCINT0-5: Off
; 0000 009B GIMSK=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 009C MCUCR=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 009D 
; 0000 009E // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 009F TIMSK=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00A0 
; 0000 00A1 // Universal Serial Interface initialization
; 0000 00A2 // Mode: Disabled
; 0000 00A3 // Clock source: Register & Counter=no clk.
; 0000 00A4 // USI Counter Overflow Interrupt: Off
; 0000 00A5 USICR=0x00;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00A6 
; 0000 00A7 // Analog Comparator initialization
; 0000 00A8 // Analog Comparator: Off
; 0000 00A9 ACSR=0x80;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00AA ADCSRB=0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00AB DIDR0=0x00;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00AC 
; 0000 00AD 
; 0000 00AE // ADC initialization
; 0000 00AF // ADC Clock frequency: 125,000 kHz
; 0000 00B0 // ADC Voltage Reference: AVCC pin
; 0000 00B1 // ADC Bipolar Input Mode: Off
; 0000 00B2 // ADC Reverse Input Polarity: Off
; 0000 00B3 // ADC Auto Trigger Source: ADC Stopped
; 0000 00B4 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 00B5 DIDR0&=0x03;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00B6 DIDR0|=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00B7 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00B8 ADCSRA=0x86;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00B9 ADCSRB&=0x5F;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00BA 
; 0000 00BB 
; 0000 00BC 
; 0000 00BD delay_ms(500);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00BE 
; 0000 00BF 
; 0000 00C0 while (1)
;PCODE: $000000C8 VOL: 0
; 0000 00C1       {
; 0000 00C2 
; 0000 00C3 delay_ms(25);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00C4 beep (13107);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00C5 i++;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00C6 }}
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
