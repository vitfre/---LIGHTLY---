
Turn-sgnal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000342  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006a  0080006a  000003e0  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b2b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000050  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000060f  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000170  00000000  00000000  000011b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001e5  00000000  00000000  00001329  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000094  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002cf  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000009a  00000000  00000000  00001873  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  0000190d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	78 c1       	rjmp	.+752    	; 0x2fe <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e2 e4       	ldi	r30, 0x42	; 66
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	aa 36       	cpi	r26, 0x6A	; 106
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	aa e6       	ldi	r26, 0x6A	; 106
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 37       	cpi	r26, 0x78	; 120
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	8c d0       	rcall	.+280    	; 0x15c <main>
  44:	7c c1       	rjmp	.+760    	; 0x33e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <BUT_Debrief>:
buttons_t but_left  = {BUT_LEFT,  0, BUT_NO_PRESS};
buttons_t but_right = {BUT_RIGHT, 0, BUT_NO_PRESS};
buttons_t but_contr = {BUT_CONTR, 0, BUT_NO_PRESS};

but_state_t BUT_Debrief(buttons_t *but)
{
  48:	fc 01       	movw	r30, r24
	but_state_t but_state = BUT_NO_PRESS;
	
	//убрал ! чтобы срабатывание было от 1
	if (PIN_Check(but->pin)){
  4a:	86 b3       	in	r24, 0x16	; 22
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	00 80       	ld	r0, Z
  50:	02 c0       	rjmp	.+4      	; 0x56 <BUT_Debrief+0xe>
  52:	95 95       	asr	r25
  54:	87 95       	ror	r24
  56:	0a 94       	dec	r0
  58:	e2 f7       	brpl	.-8      	; 0x52 <BUT_Debrief+0xa>
  5a:	80 ff       	sbrs	r24, 0
  5c:	1a c0       	rjmp	.+52     	; 0x92 <BUT_Debrief+0x4a>
	   if (but->count < BUT_COUNT_MAX) {
  5e:	81 81       	ldd	r24, Z+1	; 0x01
  60:	92 81       	ldd	r25, Z+2	; 0x02
  62:	88 30       	cpi	r24, 0x08	; 8
  64:	22 e0       	ldi	r18, 0x02	; 2
  66:	92 07       	cpc	r25, r18
  68:	90 f4       	brcc	.+36     	; 0x8e <BUT_Debrief+0x46>
	      but->count++;		
  6a:	01 96       	adiw	r24, 0x01	; 1
  6c:	92 83       	std	Z+2, r25	; 0x02
  6e:	81 83       	std	Z+1, r24	; 0x01
	      if (but->count > BUT_THRESHOLD){
  70:	86 30       	cpi	r24, 0x06	; 6
  72:	91 05       	cpc	r25, r1
  74:	60 f0       	brcs	.+24     	; 0x8e <BUT_Debrief+0x46>
		     but->buf = BUT_PRESSED;
		     if (but->count > BUT_LONG_THRESHOLD){
  76:	85 3f       	cpi	r24, 0xF5	; 245
  78:	91 40       	sbci	r25, 0x01	; 1
  7a:	18 f4       	brcc	.+6      	; 0x82 <BUT_Debrief+0x3a>
	//убрал ! чтобы срабатывание было от 1
	if (PIN_Check(but->pin)){
	   if (but->count < BUT_COUNT_MAX) {
	      but->count++;		
	      if (but->count > BUT_THRESHOLD){
		     but->buf = BUT_PRESSED;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	83 83       	std	Z+3, r24	; 0x03
  80:	06 c0       	rjmp	.+12     	; 0x8e <BUT_Debrief+0x46>
		     if (but->count > BUT_LONG_THRESHOLD){
			    but->buf = BUT_LONG_PRESS;
  82:	83 e0       	ldi	r24, 0x03	; 3
  84:	83 83       	std	Z+3, r24	; 0x03
			    but->count = BUT_COUNT_MAX + 10;
  86:	82 e1       	ldi	r24, 0x12	; 18
  88:	92 e0       	ldi	r25, 0x02	; 2
  8a:	92 83       	std	Z+2, r25	; 0x02
  8c:	81 83       	std	Z+1, r24	; 0x01
			 }
		  }
		  //but_state = but->buf;	
       }
	   but_state = but->buf;
  8e:	83 81       	ldd	r24, Z+3	; 0x03
  90:	08 95       	ret
	}
    else{
	   but->count = 0;
  92:	12 82       	std	Z+2, r1	; 0x02
  94:	11 82       	std	Z+1, r1	; 0x01
	   if (but->buf == BUT_PRESSED){
  96:	83 81       	ldd	r24, Z+3	; 0x03
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	21 f0       	breq	.+8      	; 0xa4 <__stack+0x5>
	      but_state = BUT_RELEASE;
	   }
	   if (but->buf == BUT_LONG_PRESS){
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	21 f0       	breq	.+8      	; 0xa8 <__stack+0x9>
buttons_t but_right = {BUT_RIGHT, 0, BUT_NO_PRESS};
buttons_t but_contr = {BUT_CONTR, 0, BUT_NO_PRESS};

but_state_t BUT_Debrief(buttons_t *but)
{
	but_state_t but_state = BUT_NO_PRESS;
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	03 c0       	rjmp	.+6      	; 0xaa <__stack+0xb>
	   but_state = but->buf;
	}
    else{
	   but->count = 0;
	   if (but->buf == BUT_PRESSED){
	      but_state = BUT_RELEASE;
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	01 c0       	rjmp	.+2      	; 0xaa <__stack+0xb>
	   }
	   if (but->buf == BUT_LONG_PRESS){
		   but_state = BUT_RELEASE_LONG;
  a8:	84 e0       	ldi	r24, 0x04	; 4
	   }
	   but->buf = BUT_NO_PRESS;
  aa:	13 82       	std	Z+3, r1	; 0x03
    }
	return but_state;
}
  ac:	08 95       	ret

000000ae <SetNextState>:
uint8_t led_enable = 0;


void SetNextState(dev_state_t next_state)
{
	dev_cur_state = next_state;
  ae:	80 93 69 00 	sts	0x0069, r24
  b2:	08 95       	ret

000000b4 <LED_SetOff>:
}


void LED_SetOff(void)
{
	led_enable = 0;
  b4:	10 92 6a 00 	sts	0x006A, r1
  b8:	08 95       	ret

000000ba <LED_Set>:
}

void LED_Set(uint8_t leds, uint8_t repeat)
{
   led_enable = 1;
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	90 93 6a 00 	sts	0x006A, r25
   signals = leds;
  c0:	80 93 6c 00 	sts	0x006C, r24
   cycle = repeat;	
  c4:	60 93 6b 00 	sts	0x006B, r22
  c8:	08 95       	ret

000000ca <LED_Func>:

void LED_Func(void)
{
	static uint8_t sign;
	
	switch(led_state){
  ca:	80 91 68 00 	lds	r24, 0x0068
  ce:	86 30       	cpi	r24, 0x06	; 6
  d0:	31 f1       	breq	.+76     	; 0x11e <LED_Func+0x54>
  d2:	87 30       	cpi	r24, 0x07	; 7
  d4:	c1 f1       	breq	.+112    	; 0x146 <LED_Func+0x7c>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	09 f0       	breq	.+2      	; 0xdc <LED_Func+0x12>
  da:	3f c0       	rjmp	.+126    	; 0x15a <LED_Func+0x90>
		case STATE_NORMAL:
		if (led_enable){
  dc:	80 91 6a 00 	lds	r24, 0x006A
  e0:	88 23       	and	r24, r24
  e2:	d9 f1       	breq	.+118    	; 0x15a <LED_Func+0x90>
			sign = signals;
  e4:	90 91 6c 00 	lds	r25, 0x006C
  e8:	90 93 77 00 	sts	0x0077, r25
			if (cycle != LED_BLINK_INFINITY){
  ec:	80 91 6b 00 	lds	r24, 0x006B
  f0:	8f 3f       	cpi	r24, 0xFF	; 255
  f2:	41 f0       	breq	.+16     	; 0x104 <LED_Func+0x3a>
			  if (!cycle){
  f4:	81 11       	cpse	r24, r1
  f6:	03 c0       	rjmp	.+6      	; 0xfe <LED_Func+0x34>
		        led_enable = 0;	  
  f8:	10 92 6a 00 	sts	0x006A, r1
				break;
  fc:	08 95       	ret
              }
			  cycle--;
  fe:	81 50       	subi	r24, 0x01	; 1
 100:	80 93 6b 00 	sts	0x006B, r24
   		    }
			led_state = STATE_LED_ON;
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	80 93 68 00 	sts	0x0068, r24
			PORTB |= sign;
 10a:	88 b3       	in	r24, 0x18	; 24
 10c:	98 2b       	or	r25, r24
 10e:	98 bb       	out	0x18, r25	; 24
		    soft_timer_state = STIM_WORKS;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 74 00 	sts	0x0074, r24
		    soft_timer_count = LED_BLINK_PERIOD;	
 116:	86 e9       	ldi	r24, 0x96	; 150
 118:	80 93 75 00 	sts	0x0075, r24
 11c:	08 95       	ret
		}
		break;
		
		case STATE_LED_ON:
		if(STIM_Check(STIM_EXPIRED)){
 11e:	80 91 74 00 	lds	r24, 0x0074
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	d1 f4       	brne	.+52     	; 0x15a <LED_Func+0x90>
           led_state = STATE_LED_OFF;
 126:	87 e0       	ldi	r24, 0x07	; 7
 128:	80 93 68 00 	sts	0x0068, r24
		   PORTB &= ~sign;
 12c:	98 b3       	in	r25, 0x18	; 24
 12e:	80 91 77 00 	lds	r24, 0x0077
 132:	80 95       	com	r24
 134:	89 23       	and	r24, r25
 136:	88 bb       	out	0x18, r24	; 24
		   soft_timer_state = STIM_WORKS;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 74 00 	sts	0x0074, r24
		   soft_timer_count = LED_BLINK_PERIOD;		   
 13e:	86 e9       	ldi	r24, 0x96	; 150
 140:	80 93 75 00 	sts	0x0075, r24
 144:	08 95       	ret
		}
		break;
		
		case STATE_LED_OFF:
		if(STIM_Check(STIM_EXPIRED)){
 146:	80 91 74 00 	lds	r24, 0x0074
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	31 f4       	brne	.+12     	; 0x15a <LED_Func+0x90>
           led_state = STATE_NORMAL;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 68 00 	sts	0x0068, r24
		   LED_OffAll();	   
 154:	88 b3       	in	r24, 0x18	; 24
 156:	87 7e       	andi	r24, 0xE7	; 231
 158:	88 bb       	out	0x18, r24	; 24
 15a:	08 95       	ret

0000015c <main>:
}

int main(void)
{
	/*инициализация порта*/
	DDRB = (0<<BUT_LEFT)|(0<<BUT_RIGHT)|(0<<BUT_CONTR)|(1<<LEFT_SIGNAL)|(1<<RIGHT_SIGNAL);
 15c:	88 e1       	ldi	r24, 0x18	; 24
 15e:	87 bb       	out	0x17, r24	; 23
	PORTB = (0<<LEFT_SIGNAL)|(0<<RIGHT_SIGNAL);
 160:	18 ba       	out	0x18, r1	; 24
	//PORTB = (1<<BUT_LEFT)|(1<<BUT_RIGHT)|(1<<BUT_CONTR); //закомментил, так как подтяжка внешняя
	
	/*инициализация таймера Т0. период 10мс.*/
	TCCR0A = (1<<WGM01)|(0<<WGM00);
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = (0<<WGM02)|(0<<CS02)|(1<<CS01)|(0<<CS00);
 166:	83 bf       	out	0x33, r24	; 51
	OCR0A  = TIM_OCR_VALUE;
 168:	8f e1       	ldi	r24, 0x1F	; 31
 16a:	86 bf       	out	0x36, r24	; 54
	TIMSK0 = (1<<OCIE0A);
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	89 bf       	out	0x39, r24	; 57
		
		
	sei();
 170:	78 94       	sei
	
    while(1)
    {				  	
        if (tim0_comp_flag){
 172:	80 91 76 00 	lds	r24, 0x0076
 176:	88 23       	and	r24, r24
 178:	e1 f3       	breq	.-8      	; 0x172 <main+0x16>
		   tim0_comp_flag = 0;
 17a:	10 92 76 00 	sts	0x0076, r1
           
		   /*обработка событий*/
		   switch (dev_cur_state)
 17e:	80 91 69 00 	lds	r24, 0x0069
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	09 f4       	brne	.+2      	; 0x188 <main+0x2c>
 186:	69 c0       	rjmp	.+210    	; 0x25a <main+0xfe>
 188:	30 f4       	brcc	.+12     	; 0x196 <main+0x3a>
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	59 f0       	breq	.+22     	; 0x1a4 <main+0x48>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	09 f0       	breq	.+2      	; 0x194 <main+0x38>
 192:	a1 c0       	rjmp	.+322    	; 0x2d6 <main+0x17a>
 194:	32 c0       	rjmp	.+100    	; 0x1fa <main+0x9e>
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	09 f4       	brne	.+2      	; 0x19c <main+0x40>
 19a:	8f c0       	rjmp	.+286    	; 0x2ba <main+0x15e>
 19c:	85 30       	cpi	r24, 0x05	; 5
 19e:	09 f0       	breq	.+2      	; 0x1a2 <main+0x46>
 1a0:	9a c0       	rjmp	.+308    	; 0x2d6 <main+0x17a>
 1a2:	92 c0       	rjmp	.+292    	; 0x2c8 <main+0x16c>
		   {
			   case STATE_NORMAL:
			   	  LED_SetOff();
 1a4:	87 df       	rcall	.-242    	; 0xb4 <LED_SetOff>
			      if ((but_left_state == BUT_PRESSED)||(but_left_state == BUT_LONG_PRESS))     { LED_Set((1<<LEFT_SIGNAL), LED_BLINK_SHORT_TURN); SetNextState(STATE_LEFT_TURN);} 
 1a6:	80 91 73 00 	lds	r24, 0x0073
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	11 f0       	breq	.+4      	; 0x1b2 <main+0x56>
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	29 f4       	brne	.+10     	; 0x1bc <main+0x60>
 1b2:	63 e0       	ldi	r22, 0x03	; 3
 1b4:	88 e0       	ldi	r24, 0x08	; 8
 1b6:	81 df       	rcall	.-254    	; 0xba <LED_Set>
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	79 df       	rcall	.-270    	; 0xae <SetNextState>
			      if ((but_right_state == BUT_PRESSED)||(but_right_state == BUT_LONG_PRESS))   { LED_Set((1<<RIGHT_SIGNAL), LED_BLINK_SHORT_TURN);SetNextState(STATE_RIGHT_TURN);}	      
 1bc:	80 91 72 00 	lds	r24, 0x0072
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	11 f0       	breq	.+4      	; 0x1c8 <main+0x6c>
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	29 f4       	brne	.+10     	; 0x1d2 <main+0x76>
 1c8:	63 e0       	ldi	r22, 0x03	; 3
 1ca:	80 e1       	ldi	r24, 0x10	; 16
 1cc:	76 df       	rcall	.-276    	; 0xba <LED_Set>
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	6e df       	rcall	.-292    	; 0xae <SetNextState>
				  if (but_contr_state == BUT_RELEASE)    { LED_Set((1<<LEFT_SIGNAL)|(1<<RIGHT_SIGNAL), LED_BLINK_THANK); SetNextState(STATE_THANK);}
 1d2:	80 91 71 00 	lds	r24, 0x0071
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	29 f4       	brne	.+10     	; 0x1e4 <main+0x88>
 1da:	63 e0       	ldi	r22, 0x03	; 3
 1dc:	88 e1       	ldi	r24, 0x18	; 24
 1de:	6d df       	rcall	.-294    	; 0xba <LED_Set>
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	65 df       	rcall	.-310    	; 0xae <SetNextState>
				  if (but_contr_state == BUT_LONG_PRESS) { LED_Set((1<<LEFT_SIGNAL)|(1<<RIGHT_SIGNAL), LED_BLINK_INFINITY);SetNextState(STATE_ALARM);}	  		  
 1e4:	80 91 71 00 	lds	r24, 0x0071
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	09 f0       	breq	.+2      	; 0x1ee <main+0x92>
 1ec:	77 c0       	rjmp	.+238    	; 0x2dc <main+0x180>
 1ee:	6f ef       	ldi	r22, 0xFF	; 255
 1f0:	88 e1       	ldi	r24, 0x18	; 24
 1f2:	63 df       	rcall	.-314    	; 0xba <LED_Set>
 1f4:	85 e0       	ldi	r24, 0x05	; 5
 1f6:	5b df       	rcall	.-330    	; 0xae <SetNextState>
 1f8:	71 c0       	rjmp	.+226    	; 0x2dc <main+0x180>
			      
				  break;
			   
			   case STATE_LEFT_TURN:	
			      if (but_contr_state == BUT_RELEASE) {
 1fa:	80 91 71 00 	lds	r24, 0x0071
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	29 f4       	brne	.+10     	; 0x20c <main+0xb0>
				      SetNextState(STATE_THANK);
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	54 df       	rcall	.-344    	; 0xae <SetNextState>
					  LED_Set((1<<LEFT_SIGNAL)|(1<<RIGHT_SIGNAL), LED_BLINK_THANK);
 206:	63 e0       	ldi	r22, 0x03	; 3
 208:	88 e1       	ldi	r24, 0x18	; 24
 20a:	57 df       	rcall	.-338    	; 0xba <LED_Set>
				  }
				  
				  if (but_contr_state == BUT_LONG_PRESS) { 
 20c:	80 91 71 00 	lds	r24, 0x0071
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	29 f4       	brne	.+10     	; 0x21e <main+0xc2>
					  SetNextState(STATE_ALARM);      
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	4b df       	rcall	.-362    	; 0xae <SetNextState>
					  LED_Set((1<<LEFT_SIGNAL)|(1<<RIGHT_SIGNAL), LED_BLINK_INFINITY);
 218:	6f ef       	ldi	r22, 0xFF	; 255
 21a:	88 e1       	ldi	r24, 0x18	; 24
 21c:	4e df       	rcall	.-356    	; 0xba <LED_Set>
				  }
				  
				  if ((but_right_state == BUT_PRESSED)||(but_right_state == BUT_LONG_PRESS))   { LED_Set((1<<RIGHT_SIGNAL), LED_BLINK_SHORT_TURN);SetNextState(STATE_RIGHT_TURN);}	
 21e:	80 91 72 00 	lds	r24, 0x0072
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	11 f0       	breq	.+4      	; 0x22a <main+0xce>
 226:	83 30       	cpi	r24, 0x03	; 3
 228:	29 f4       	brne	.+10     	; 0x234 <main+0xd8>
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	80 e1       	ldi	r24, 0x10	; 16
 22e:	45 df       	rcall	.-374    	; 0xba <LED_Set>
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	3d df       	rcall	.-390    	; 0xae <SetNextState>
				  	
				  if (!led_enable){				  
 234:	80 91 6a 00 	lds	r24, 0x006A
 238:	81 11       	cpse	r24, r1
 23a:	50 c0       	rjmp	.+160    	; 0x2dc <main+0x180>
			         if ((but_left_state == BUT_RELEASE)||(but_left_state == BUT_RELEASE_LONG)||(but_left_state == BUT_NO_PRESS)){ 
 23c:	80 91 73 00 	lds	r24, 0x0073
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	21 f0       	breq	.+8      	; 0x24c <main+0xf0>
 244:	84 30       	cpi	r24, 0x04	; 4
 246:	11 f0       	breq	.+4      	; 0x24c <main+0xf0>
 248:	81 11       	cpse	r24, r1
 24a:	03 c0       	rjmp	.+6      	; 0x252 <main+0xf6>
				        SetNextState(STATE_NORMAL);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	2f df       	rcall	.-418    	; 0xae <SetNextState>
 250:	45 c0       	rjmp	.+138    	; 0x2dc <main+0x180>
				     }
					 else{
					    LED_Set((1<<LEFT_SIGNAL), LED_BLINK_ONE);	 
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	88 e0       	ldi	r24, 0x08	; 8
 256:	31 df       	rcall	.-414    	; 0xba <LED_Set>
 258:	41 c0       	rjmp	.+130    	; 0x2dc <main+0x180>
					 }
				  }
				  break;
			   
			   case STATE_RIGHT_TURN:
			      if (but_contr_state == BUT_RELEASE) {
 25a:	80 91 71 00 	lds	r24, 0x0071
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	29 f4       	brne	.+10     	; 0x26c <main+0x110>
				      SetNextState(STATE_THANK);
 262:	84 e0       	ldi	r24, 0x04	; 4
 264:	24 df       	rcall	.-440    	; 0xae <SetNextState>
				      LED_Set((1<<LEFT_SIGNAL)|(1<<RIGHT_SIGNAL), LED_BLINK_THANK);
 266:	63 e0       	ldi	r22, 0x03	; 3
 268:	88 e1       	ldi	r24, 0x18	; 24
 26a:	27 df       	rcall	.-434    	; 0xba <LED_Set>
			      }
				  				  
				  if (but_contr_state == BUT_LONG_PRESS) {
 26c:	80 91 71 00 	lds	r24, 0x0071
 270:	83 30       	cpi	r24, 0x03	; 3
 272:	29 f4       	brne	.+10     	; 0x27e <main+0x122>
					  SetNextState(STATE_ALARM);
 274:	85 e0       	ldi	r24, 0x05	; 5
 276:	1b df       	rcall	.-458    	; 0xae <SetNextState>
					  LED_Set((1<<LEFT_SIGNAL)|(1<<RIGHT_SIGNAL), LED_BLINK_INFINITY);
 278:	6f ef       	ldi	r22, 0xFF	; 255
 27a:	88 e1       	ldi	r24, 0x18	; 24
 27c:	1e df       	rcall	.-452    	; 0xba <LED_Set>
				  }

                  if ((but_left_state == BUT_PRESSED)||(but_left_state == BUT_LONG_PRESS))     { LED_Set((1<<LEFT_SIGNAL), LED_BLINK_SHORT_TURN); SetNextState(STATE_LEFT_TURN);}
 27e:	80 91 73 00 	lds	r24, 0x0073
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	11 f0       	breq	.+4      	; 0x28a <main+0x12e>
 286:	83 30       	cpi	r24, 0x03	; 3
 288:	29 f4       	brne	.+10     	; 0x294 <main+0x138>
 28a:	63 e0       	ldi	r22, 0x03	; 3
 28c:	88 e0       	ldi	r24, 0x08	; 8
 28e:	15 df       	rcall	.-470    	; 0xba <LED_Set>
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	0d df       	rcall	.-486    	; 0xae <SetNextState>
				  
				  
				  if (!led_enable){					  
 294:	80 91 6a 00 	lds	r24, 0x006A
 298:	81 11       	cpse	r24, r1
 29a:	20 c0       	rjmp	.+64     	; 0x2dc <main+0x180>
				     if ((but_right_state == BUT_RELEASE)||(but_right_state == BUT_RELEASE_LONG)||(but_right_state == BUT_NO_PRESS)){ 
 29c:	80 91 72 00 	lds	r24, 0x0072
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	21 f0       	breq	.+8      	; 0x2ac <main+0x150>
 2a4:	84 30       	cpi	r24, 0x04	; 4
 2a6:	11 f0       	breq	.+4      	; 0x2ac <main+0x150>
 2a8:	81 11       	cpse	r24, r1
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <main+0x156>
					    SetNextState(STATE_NORMAL);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	ff de       	rcall	.-514    	; 0xae <SetNextState>
 2b0:	15 c0       	rjmp	.+42     	; 0x2dc <main+0x180>
				     } 
					 else{
					    LED_Set((1<<RIGHT_SIGNAL), LED_BLINK_ONE);	 
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	80 e1       	ldi	r24, 0x10	; 16
 2b6:	01 df       	rcall	.-510    	; 0xba <LED_Set>
 2b8:	11 c0       	rjmp	.+34     	; 0x2dc <main+0x180>
					 }
				  }
			      break;
				  
			   case STATE_THANK:
			      if (!led_enable){
 2ba:	80 91 6a 00 	lds	r24, 0x006A
 2be:	81 11       	cpse	r24, r1
 2c0:	0d c0       	rjmp	.+26     	; 0x2dc <main+0x180>
                     SetNextState(STATE_NORMAL);  
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	f4 de       	rcall	.-536    	; 0xae <SetNextState>
 2c6:	0a c0       	rjmp	.+20     	; 0x2dc <main+0x180>
				  }
			      break;
				  
			   case STATE_ALARM:     
				  if ((but_contr_state == BUT_RELEASE)) { 
 2c8:	80 91 71 00 	lds	r24, 0x0071
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	31 f4       	brne	.+12     	; 0x2dc <main+0x180>
				     SetNextState(STATE_NORMAL);  
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	ed de       	rcall	.-550    	; 0xae <SetNextState>
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <main+0x180>
				  }	
			      break;
			   	  	  
			   default:
			      dev_cur_state = STATE_NORMAL;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 69 00 	sts	0x0069, r24
			      break;	  
		   }
		   
		   LED_Func();
 2dc:	f6 de       	rcall	.-532    	; 0xca <LED_Func>
		   
		   /* опрос кнопок */
		   but_left_state = BUT_Debrief(&but_left);
 2de:	84 e6       	ldi	r24, 0x64	; 100
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	b2 de       	rcall	.-668    	; 0x48 <BUT_Debrief>
 2e4:	80 93 73 00 	sts	0x0073, r24
		   but_right_state = BUT_Debrief(&but_right);
 2e8:	80 e6       	ldi	r24, 0x60	; 96
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	ad de       	rcall	.-678    	; 0x48 <BUT_Debrief>
 2ee:	80 93 72 00 	sts	0x0072, r24
		   but_contr_state = BUT_Debrief(&but_contr);
 2f2:	8d e6       	ldi	r24, 0x6D	; 109
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	a8 de       	rcall	.-688    	; 0x48 <BUT_Debrief>
 2f8:	80 93 71 00 	sts	0x0071, r24
 2fc:	3a cf       	rjmp	.-396    	; 0x172 <main+0x16>

000002fe <__vector_6>:
    }
}

/*софтовый таймер и флаг для опроса кнопок*/
ISR(TIM0_COMPA_vect)
{
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	8f 93       	push	r24
   if(soft_timer_state == STIM_WORKS){
 30a:	80 91 74 00 	lds	r24, 0x0074
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	69 f4       	brne	.+26     	; 0x32c <__vector_6+0x2e>
	   if (soft_timer_count){
 312:	80 91 75 00 	lds	r24, 0x0075
 316:	88 23       	and	r24, r24
 318:	31 f0       	breq	.+12     	; 0x326 <__vector_6+0x28>
	      soft_timer_count--;	   
 31a:	80 91 75 00 	lds	r24, 0x0075
 31e:	81 50       	subi	r24, 0x01	; 1
 320:	80 93 75 00 	sts	0x0075, r24
 324:	03 c0       	rjmp	.+6      	; 0x32c <__vector_6+0x2e>
	   }
	   else{
	      soft_timer_state = STIM_EXPIRED;	   
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	80 93 74 00 	sts	0x0074, r24
	   }
   }	
	
	tim0_comp_flag = 1;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 76 00 	sts	0x0076, r24
}
 332:	8f 91       	pop	r24
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
