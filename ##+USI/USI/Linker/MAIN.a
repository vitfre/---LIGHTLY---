;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;
;//****************************************************************************************
;#define                                pls PIND.6
;#define                                mns PIND.5
;
;unsigned char dn=0;
;unsigned int dig_shn;
;unsigned int led_num=99;
;
;//Таблица цифр для семисегментника
;unsigned char led_table[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};

	.DSEG
;
;void dig_show()
; 0000 0010 { //Здесь отображаем разряды

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0011     PORTD|=0xf; //Не показываем ни чего
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0012     if (dn==0)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0013     {
; 0000 0014         dig_shn=led_num;     //Если первый разряд обновляем переменную
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0015     };
;PCODE: $00000013 VOL: 0
; 0000 0016     PORTB=led_table[dig_shn%10]; //Извлекаем разряд
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0017     if (dn==2)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0018     {
; 0000 0019         PORTB|=0x80;             //Если третий разряд кажем точку
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 001A     };
;PCODE: $0000001F VOL: 0
; 0000 001B     dig_shn/=10; //Сдвигаем разряд вправо
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001C     PORTD&=~(1<<dn); //Показываем разряд
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001D     dn++;
;PCODE: $0000002C VOL: 0
; 0000 001E     if (dn>3)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 001F     {
; 0000 0020         dn=0;
;PCODE: $00000030 VOL: 0
; 0000 0021     };
;PCODE: $00000031 VOL: 0
; 0000 0022 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) { //Прерывание переполнения таймера 0
; 0000 0024 interrupt [7] void timer0_ovf_isr(void) {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0025 dig_show();
;PCODE: $00000036 VOL: 0
; 0000 0026 }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;
;void main(void)
; 0000 0029 {
;PCODE: $0000003A VOL: 0
; 0000 002A // Declare your local variables here
; 0000 002B 
; 0000 002C // Crystal Oscillator division factor: 1
; 0000 002D #pragma optsize-
; 0000 002E CLKPR=0x80;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002F CLKPR=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0030 #ifdef _OPTIMIZE_SIZE_
; 0000 0031 #pragma optsize+
; 0000 0032 #endif
; 0000 0033 
; 0000 0034 // Input/Output Ports initialization
; 0000 0035 // Port A initialization
; 0000 0036 // Func2=In Func1=In Func0=In
; 0000 0037 // State2=T State1=T State0=T
; 0000 0038 PORTA=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0039 DDRA=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 003A 
; 0000 003B // Port B initialization
; 0000 003C // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 003D // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 003E PORTB=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003F DDRB=0xFF;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0040 
; 0000 0041 // Port D initialization
; 0000 0042 // Func6=In Func5=In Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0043 // State6=P State5=P State4=1 State3=0 State2=0 State1=0 State0=0
; 0000 0044 PORTD=0x70;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0045 DDRD=0x1F;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0046 
; 0000 0047 // Timer/Counter 0 initialization
; 0000 0048 // Clock source: System Clock
; 0000 0049 // Clock value: 62,500 kHz
; 0000 004A // Mode: Normal top=0xFF
; 0000 004B // OC0A output: Disconnected
; 0000 004C // OC0B output: Disconnected
; 0000 004D TCCR0A=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 004E TCCR0B=0x03;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 004F TCNT0=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0050 OCR0A=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0051 OCR0B=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0052 
; 0000 0053 // Timer/Counter 1 initialization
; 0000 0054 // Clock source: System Clock
; 0000 0055 // Clock value: Timer1 Stopped
; 0000 0056 // Mode: Normal top=0xFFFF
; 0000 0057 // OC1A output: Discon.
; 0000 0058 // OC1B output: Discon.
; 0000 0059 // Noise Canceler: Off
; 0000 005A // Input Capture on Falling Edge
; 0000 005B // Timer1 Overflow Interrupt: Off
; 0000 005C // Input Capture Interrupt: Off
; 0000 005D // Compare A Match Interrupt: Off
; 0000 005E // Compare B Match Interrupt: Off
; 0000 005F TCCR1A=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0060 TCCR1B=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0061 TCNT1H=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0062 TCNT1L=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0063 ICR1H=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0064 ICR1L=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0065 OCR1AH=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0066 OCR1AL=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0067 OCR1BH=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0068 OCR1BL=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0069 
; 0000 006A // External Interrupt(s) initialization
; 0000 006B // INT0: Off
; 0000 006C // INT1: Off
; 0000 006D // Interrupt on any change on pins PCINT0-7: Off
; 0000 006E GIMSK=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 006F MCUCR=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0070 
; 0000 0071 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0072 TIMSK=0x02;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0073 
; 0000 0074 // Universal Serial Interface initialization
; 0000 0075 // Mode: Disabled
; 0000 0076 // Clock source: Register & Counter=no clk.
; 0000 0077 // USI Counter Overflow Interrupt: Off
; 0000 0078 USICR=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0079 
; 0000 007A // USART initialization
; 0000 007B // USART disabled
; 0000 007C UCSRB=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 007D 
; 0000 007E // Analog Comparator initialization
; 0000 007F // Analog Comparator: Off
; 0000 0080 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0081 ACSR=0x80;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0082 DIDR=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0083 
; 0000 0084 // Global enable interrupts
; 0000 0085 #asm("sei")
;PCODE: $00000077 VOL: 0
	sei
;PCODE: $00000078 VOL: 0
; 0000 0086     while (1)
;PCODE: $00000079 VOL: 0
; 0000 0087     {
; 0000 0088     if (mns==0)
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0089     {
; 0000 008A         led_num--;   //якщо кнопка нажата то -1
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 008B         while (mns==0)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 008C         {
; 0000 008D             delay_ms(10);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 008E         }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 008F     };
;PCODE: $00000089 VOL: 0
; 0000 0090     if (pls==0)
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0091     {
; 0000 0092         led_num++;   //якщо кнопка нажата то -1
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0093         while (pls==0)
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0094         {
; 0000 0095             delay_ms(10);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0096         }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0097     };
;PCODE: $00000099 VOL: 0
; 0000 0098     //led_num=12;
; 0000 0099     delay_ms(10);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 009A     }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 009B 
; 0000 009C }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
